generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  username          String             @unique @db.VarChar(15)
  rain              String             @unique @db.VarChar(36)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  RegisteredDevices RegisteredDevice[]
  RainMembers       RainMembers[]
}

model RainCompany {
  id      Int           @id @default(autoincrement())
  ref     String        @unique
  name    String
  members RainMembers[]
}

model RainMembers {
  id        Int         @id @default(autoincrement())
  active    Boolean     @default(true)
  userId    Int
  companyId Int
  company   RainCompany @relation(fields: [companyId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
}

model RegisteredDevice {
  id           Int                 @id @default(autoincrement())
  name         String              @db.VarChar(255)
  credentialId String              @unique
  publicKey    String
  algorithm    CredentialAlgorithm @default(ES256)
  userId       Int
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  user         User                @relation(fields: [userId], references: [id])
  Session      Session[]
}

model Session {
  id        Int              @id @default(autoincrement())
  token     String           @unique
  deviceId  Int
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      RegisteredDevice @relation(fields: [deviceId], references: [id])
}

model Merchant {
  id                  Int             @id @default(autoincrement())
  name                String          @db.VarChar(255)
  surname             String          @db.VarChar(255)
  email               String          @unique
  tokenAuth           String?
  phoneNumber         String?         @unique
  companyNumber       String?
  companyJurisdiction String?         @db.Char(2)
  fee                 Decimal         @default(6.50) @db.Decimal(4, 2)
  walletAddress       String          @unique
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  addressId           BigInt
  Buyer               Buyer[]
  Compliance          Compliance[]
  registeredAddress   PhysicalAddress @relation(fields: [addressId], references: [id])
  Order               Transaction[]

  @@unique([companyNumber, companyJurisdiction])
}

model Buyer {
  id             BigInt           @id @default(autoincrement())
  name           String           @db.VarChar(255)
  email          String           @unique
  tokenAuth      String
  phoneNumber    String
  walletAddress  String?          @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  merchantId     Int
  addressId      BigInt?
  billingAddress PhysicalAddress? @relation(fields: [addressId], references: [id])
  merchant       Merchant         @relation(fields: [merchantId], references: [id])
  Compliance     Compliance[]
  Order          Transaction[]
}

model Compliance {
  id                       String             @id @default(uuid()) @db.Uuid
  type                     AccountType
  verificationDocumentLink String             @unique
  termsOfServiceLink       String             @unique
  verificationStatus       VerificationStatus @default(NOT_STARTED)
  termsOfServiceStatus     TosStatus          @default(PENDING)
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  buyerId                  BigInt?
  merchantId               Int?
  buyer                    Buyer?             @relation(fields: [buyerId], references: [id])
  merchant                 Merchant?          @relation(fields: [merchantId], references: [id])
}

model Transaction {
  id               String            @id @default(uuid())
  status           TransactionStatus
  partnerTokenId   String
  partnerRequestId String
  currency         String            @db.Char(3)
  amount           BigInt
  tip              Decimal?          @default(0.00) @db.Decimal(4, 2)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  buyerId          BigInt
  merchantId       Int
  addressId        BigInt?
  shippingAddress  PhysicalAddress?  @relation(fields: [addressId], references: [id])
  buyer            Buyer             @relation(fields: [buyerId], references: [id])
  merchant         Merchant          @relation(fields: [merchantId], references: [id])
}

model PhysicalAddress {
  id          BigInt        @id @default(autoincrement())
  type        AddressType
  street1     String        @db.VarChar(50)
  street2     String?       @db.VarChar(50)
  city        String        @db.VarChar(50)
  postcode    String?       @db.VarChar(25)
  state       String?       @db.Char(2)
  country     String        @db.Char(2)
  Buyer       Buyer[]
  Merchant    Merchant[]
  Transaction Transaction[]
}

enum TransactionStatus {
  PENDING
  COMPLETE
  FAILED
  ERROR
}

enum AddressType {
  BILLING
  SHIPPING
  REGISTERED
}

enum VerificationStatus {
  NOT_STARTED
  PENDING
  INCOMPLETE
  AWAITING_UBO
  MANUAL_REVIEW
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum TosStatus {
  PENDING
  APPROVED
}

enum AccountType {
  BUSINESS
  INDIVIDUAL
}

enum CredentialAlgorithm {
  RS256
  ES256
}
