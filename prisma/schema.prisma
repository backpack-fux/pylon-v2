generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                BigInt     @id @default(autoincrement())
  name              String     @unique @db.VarChar(255)
  email             String     @unique @db.VarChar(255)
  number            String     @unique @db.VarChar(255)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  addressId         BigInt
  registeredAddress Address    @relation(fields: [addressId], references: [id])
  Merchant          Merchant[]
}

model Merchant {
  id            Int           @id @default(autoincrement())
  fee           Decimal       @default(6.50) @db.Decimal(4, 2)
  walletAddress String        @unique @db.Char(42)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  companyId     BigInt
  company       Company       @relation(fields: [companyId], references: [id])
  Customers     Customer[]
  Compliance    Compliance[]
  Orders        Transaction[]
  Employees     Employee[]
  ApiKeys       ApiKey[]
}

model Employee {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  surname    String       @db.VarChar(255)
  role       EmployeeRole
  merchantId Int
  userId     String       @unique
  rainId     String?      @unique @db.VarChar(36)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  user       User         @relation(fields: [userId], references: [id])
  merchant   Merchant     @relation(fields: [merchantId], references: [id])
}

model Customer {
  id             BigInt        @id @default(autoincrement())
  name           String        @db.VarChar(255)
  surname        String?       @db.VarChar(255)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  merchantId     Int
  addressId      BigInt?
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  billingAddress Address?      @relation(fields: [addressId], references: [id])
  merchant       Merchant      @relation(fields: [merchantId], references: [id])
  Compliance     Compliance[]
  Orders         Transaction[]

  @@unique([userId, merchantId])
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  phoneNumber        String?             @unique
  walletAddress      String?             @unique @db.Char(42)
  username           String?             @unique @db.VarChar(15)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  registeredPasskeys RegisteredPasskey[]
  Employee           Employee?
  Customers          Customer[]
}

model Compliance {
  id                       String             @id @default(uuid()) @db.Uuid
  type                     AccountType
  verificationDocumentLink String             @unique
  termsOfServiceLink       String             @unique
  verificationStatus       VerificationStatus @default(NOT_STARTED)
  termsOfServiceStatus     TosStatus          @default(PENDING)
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  buyerId                  BigInt?
  merchantId               Int?
  customer                 Customer?          @relation(fields: [buyerId], references: [id])
  merchant                 Merchant?          @relation(fields: [merchantId], references: [id])
}

model Transaction {
  id               String            @id @default(uuid())
  status           TransactionStatus
  partnerTokenId   String
  partnerRequestId String
  currency         String            @db.Char(3)
  amount           BigInt
  tip              Decimal?          @default(0.00) @db.Decimal(4, 2)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  buyerId          BigInt
  merchantId       Int
  addressId        BigInt?
  shippingAddress  Address?          @relation(fields: [addressId], references: [id])
  customer         Customer          @relation(fields: [buyerId], references: [id])
  merchant         Merchant          @relation(fields: [merchantId], references: [id])
}

model Address {
  id          BigInt        @id @default(autoincrement())
  street1     String        @db.VarChar(50)
  street2     String?       @db.VarChar(50)
  city        String        @db.VarChar(50)
  postcode    String?       @db.VarChar(25)
  state       String?       @db.Char(2)
  country     String        @db.Char(2)
  type        AddressType
  Customer    Customer[]
  Transaction Transaction[]
  Company     Company[]
}

model RegisteredPasskey {
  id           Int                 @id @default(autoincrement())
  name         String?             @db.VarChar(255)
  credentialId String              @unique
  publicKey    String
  algorithm    CredentialAlgorithm @default(ES256)
  userId       String
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  user         User                @relation(fields: [userId], references: [id])
}

model ApiKey {
  id         String    @id @default(uuid())
  key        String    @unique
  createdAt  DateTime  @default(now())
  lastUsedAt DateTime?
  expiresAt  DateTime?
  isActive   Boolean   @default(true)
  merchantId Int
  merchant   Merchant  @relation(fields: [merchantId], references: [id])

  @@index([key])
}

enum TransactionStatus {
  PENDING
  COMPLETE
  FAILED
  ERROR
}

enum AddressType {
  BILLING
  SHIPPING
  REGISTERED
}

enum VerificationStatus {
  NOT_STARTED
  PENDING
  INCOMPLETE
  AWAITING_UBO
  MANUAL_REVIEW
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum TosStatus {
  PENDING
  APPROVED
}

enum AccountType {
  BUSINESS
  INDIVIDUAL
}

enum CredentialAlgorithm {
  RS256
  ES256
}

enum EmployeeRole {
  OWNER
  BOOKKEEPER
  DEVELOPER
}
